<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.douzone.prosync.project.repository.ProjectMapper">
    <insert id="createProject" useGeneratedKeys="true" keyProperty="projectId">
        insert into project (title, intro, created_at, start_date, end_date, modified_at, is_public, project_image)
        values (#{title}, #{intro}, now(), #{startDate}, #{endDate}, now(), #{isPublic}, #{projectImage})
    </insert>

    <update id="updateProject">
        update project
        <set>
            modified_at=now(),
            <if test="title != null">
                title=#{title},
            </if>
            <if test="intro != null">
                intro=#{intro},
            </if>
            <if test="startDate != null">
                start_date=#{startDate},
            </if>
            <if test="endDate != null">
                end_date=#{endDate},
            </if>
            <if test="isPublic != null">
                is_public=#{isPublic},
            </if>
            <if test="projectImage != null">
                project_image=#{projectImage},
            </if>
        </set>
        where project_id=#{projectId} and is_deleted is false
    </update>

    <select id="findById" resultType="com.douzone.prosync.project.entity.Project">
        select * from project
        where project_id=#{projectId} and is_deleted is false
    </select>

    <select id="findAllProjects" resultType="com.douzone.prosync.project.entity.Project">
        select *
        from project
        where is_deleted is false
        order by project_id desc
    </select>

    <update id="deleteProject">
        update project
        set is_deleted=true, modified_at=now()
        where project_id=#{projectId} and is_deleted is false
    </update>

    <select id="findAll">
        select p.project_id, p.title, p.start_date, p.end_date, p.created_at, p.project_image, m.member_id, m.name, m.profile_image, b.bookmark_id
        from project p
        join member_project mp on mp.project_id = p.project_id
        join member m on mp.member_id = m.member_id
        join project_authority pa on mp.authority_id = pa.authority_id
        <if test="bookmark ==null or bookmark ==''">
            left join bookmark b on b.project_id = p.project_id and b.member_id = #{memberId}
        </if>
        <if test="bookmark != null and bookmark == true">
            join bookmark b on b.project_id = p.project_id and b.member_id = #{memberId}
        </if>
        <where>
            (mp.member_id = #{memberId} or p.is_public = true)
            and (p.is_deleted is false and pa.authority = 'ADMIN')
            <if test="search != null and search != ''">
                and ((p.title like concat('%', #{search}, '%'))
                or (m.name like concat('%', #{search}, '%') and pa.authority = 'admin'))
            </if>

            <if test="sort != null and sort == 'endDate'">
                and STR_TO_DATE(end_date, '%Y-%m-%d') >= CURRENT_DATE
            </if>
        </where>
        <choose>
            <when test="sort == 'endDate'">
                order by ABS(DATEDIFF(CURRENT_DATE, STR_TO_DATE(end_date, '%Y-%m-%d')))
            </when>
            <otherwise>
                order by project_id desc
            </otherwise>
        </choose>
    </select>

    <select id="findByMemberId" parameterType="com.douzone.prosync.project.dto.request.ProjectSearchCond">
        select p.project_id, p.title, p.start_date, p.end_date, p.created_at, p.project_image, m.member_id, m.name, m.profile_image, b.bookmark_id
        from project p
                 join member_project mp on mp.project_id = p.project_id
                 join member m on mp.member_id = m.member_id
                 join project_authority pa on mp.authority_id = pa.authority_id
                <if test="search.bookmark == null or search.bookmark ==''">
                    left join bookmark b on b.project_id = p.project_id and b.member_id = #{memberId}
                </if>
                <if test="search.bookmark != null and search.bookmark == true">
                    join bookmark b on b.project_id = p.project_id and b.member_id = #{memberId}
                </if>
                <where>
                    pa.authority = 'ADMIN' and p.project_id in (select project_id from member_project where member_id = #{memberId})
                    <if test="search.search != null and search.search != ''">
                        and ((p.title like concat('%', #{search.search}, '%'))
                        or (m.name like concat('%', #{search.search}, '%') and pa.authority = 'admin'))
                    </if>
                    <if test="search.sort != null and search.sort == 'endDate'">
                        and STR_TO_DATE(end_date, '%Y-%m-%d') >= CURRENT_DATE
                    </if>
                </where>
                <choose>
                    <when test="search.sort == 'endDate'">
                        order by ABS(DATEDIFF(CURRENT_DATE, STR_TO_DATE(end_date, '%Y-%m-%d')))
                    </when>
                    <otherwise>
                        order by project_id desc
                    </otherwise>
                </choose>
    </select>


    <select id="findByMemberIdPartOfAdmin">
        select p.project_id,
               p.title,
               p.start_date,
               p.end_date,
               p.created_at,
               p.project_image,
               m.member_id,
               m.name,
               m.profile_image
        from project p
                 join member_project mp on mp.project_id = p.project_id
                 join member m on mp.member_id = m.member_id
                 join project_authority pa on mp.authority_id = pa.authority_id
        where pa.authority = 'ADMIN'
          and mp.member_id = #{memberId}
          and mp.status = 'ACTIVE'
          and p.is_deleted = false
          and m.is_deleted = false
        order by p.title asc
    </select>

    <select id="findMembersInProject">
        select member_id
        from member_project
        where project_id = #{projectId} and status = 'ACTIVE'
    </select>

    <select id="findProjectWithBookmarkAll">
        select p.project_id, p.title, p.start_date, p.end_date, p.project_image, m.member_id, m.name, m.profile_image, b.bookmark_id
        from project p
        join member_project mp on mp.project_id = p.project_id
        join member m on mp.member_id = m.member_id
        join project_authority pa on mp.authority_id = pa.authority_id

        left join bookmark b on b.project_id = p.project_id

        <where>
            (mp.member_id = #{memberId} or p.is_public = true)
            and (p.is_deleted is false and pa.authority = 'ADMIN')
            <if test="search != null and search != ''">
                and ((p.title like concat('%', #{search}, '%'))
                or (m.name like concat('%', #{search}, '%') and pa.authority = 'admin'))
            </if>
            <if test="bookmark != null and bookmark == true">
                and b.member_id = #{memberId}
            </if>

            <if test="sort != null and sort == 'endDate'">
                and STR_TO_DATE(end_date, '%Y-%m-%d') >= CURRENT_DATE
            </if>
        </where>
        <choose>
            <when test="sort == 'endDate'">
                order by ABS(DATEDIFF(CURRENT_DATE, STR_TO_DATE(end_date, '%Y-%m-%d')))
            </when>
            <otherwise>
                order by project_id desc
            </otherwise>
        </choose>
    </select>


</mapper>